Websocket Authentication
To authenticate you need to emit identify event with the below data.

Load user data via metadata endpoint

uid is your user id (user.id from metadata)
token is socket_token from the medata
Add uid and token parameters to the connection query string

After connected emit identify event

Payload for the identify event should be:

Example

  {
    "uid": <metadata.user.id>,
    "model": { ...metadata.user },
    "authorizationToken": <metadata.socket_token>,
    "signature": <metadata.token_signature>,
    "uuid": <optional_uuidv4_device_identifier>
  }
❗️
Once you've been identified, you're required to submit the default filters to receive item updates:

In most languages, this will look something like emit('filters', {'price_max': 9999999});
Example

{
    "price_max": 9999999
}
Example Response

[
   "init",
   {
      "authenticated":true,
      "serverTime":"2021-11-30T08:30:09.443Z",
      "server":"trade:slave-server:GpOfWK",
      "id":303119,
      "steam_name":"Artemis",
      "steam_id":"76561198106192114",
      "verified":false,
      "hide_verified_icon":false,
      "avatar":"https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/4f/4f619bc788f0d41261d2a5ced0e96a281af88479_full.jpg",
      "profile_url":"https://steamcommunity.com/id/G0FastMen/",
      "balance":1533471521,
      "bet_threshold":0,
      "total_bet":2147483647,
      "total_deposit":2182538,
      "withdraw_limit":234118685,
      "ref_id":0,
      "referral_code":"Artemis",
      "muted_until":0,
      "mute_reason":"",
      "utm_campaign":"",
      "is_vac_banned":2,
      "whitelisted":false,
      "registration_ip":"0.0.0.0",
      "steam_level":343,
      "registration_timestamp":"2016-07-27 23:20:03",
      "total_profit":-689280648,
      "roles":[
         "super-mod",
         "tester",
         "support-manager",
         "root",
         "matchbetting-beta",
         "shark",
         "admin",
         "manager",
         "mod"
      ],
      "chat_tag":null,
      "uid":303119,
      "helper_mod":false,
      "mod":true,
      "super_mod":true,
      "admin":true,
      "qa":false,
      "deposited":true,
      "lvl":119,
      "badge_text":null,
      "badge_text_localized":null,
      "badge_color":null,
      "hide_rank":null,
      "name":"Artemis"
   }
]

Connecting To The Websocket
Connect to the websocket in order to receive events.

🔗
wss://trade.csgoempire.com/s/?EIO=3&transport=websocket

❗️
Connecting to the socket requires Socket.IO v4.x client

Example

const { io } = require('socket.io-client');
const axios = require('axios');

// Replace "YOUR API KEY HERE" with your API key
const csgoempireApiKey = "YOUR API KEY HERE";

// Replace domain to '.gg' if '.com' is blocked
const domain = "csgoempire.com"

const socketEndpoint = `wss://trade.${domain}/trade`;

// Set the authorization header for all axios requests to the CSGOEmpire API Key
axios.defaults.headers.common['Authorization'] = `Bearer ${csgoempireApiKey}`;

let userData = null;
let userDataRefreshedAt = null;
async function refreshUserData() { 
  if (userDataRefreshedAt && userDataRefreshedAt > Date.now() - 15*1000) {
    // refreshed less than 15s ago, should be still valid
    return;
  }
  
  try {
	  // Get the user data from the socket
  	// Token is valid 30s
	  userData = (await axios.get(`https://${domain}/api/v2/metadata/socket`)).data;
  	userDataRefreshedAt = Date.now();
  } catch (error) {
    console.log(`Failed to refresh user data: ${error.message}`);
  }
}

// Function for connecting to the web socket
async function initSocket() {

    console.log("Connecting to websocket...");

    try {
				await refreshUserData();

        // Initalize socket connection
        const socket = io(
            socketEndpoint,
            {
                transports: ["websocket"],
                path: "/s/",
                secure: true,
                rejectUnauthorized: false,
                reconnect: true,
                query: {
                  uid: userData.user.id,
                  token: userData.socket_token,
                },              
                extraHeaders: { 'User-agent': `${userData.user.id} API Bot` } //this lets the server know that this is a bot
            }
        );

        socket.on('connect', async () => {

            // Log when connected
            console.log(`Connected to websocket`);

            // Handle the Init event
            socket.on('init', async (data) => {
                if (data && data.authenticated) {
                    console.log(`Successfully authenticated as ${data.name}`);
                    
                    // Emit the default filters to ensure we receive events
                    socket.emit('filters', {
                        price_max: 9999999
                    });
                    
                } else {                    
                    await refreshUserData();
                    // When the server asks for it, emit the data we got earlier to the socket to identify this client as the user
                    socket.emit('identify', {
                        uid: userData.user.id,
                        model: userData.user,
                        authorizationToken: userData.socket_token,
                        signature: userData.socket_signature
                    });
                }
            })

            // Listen for the following event to be emitted by the socket after we've identified the user
            socket.on('timesync', (data) => console.log(`Timesync: ${JSON.stringify(data)}`));
            socket.on('new_item', (data) => console.log(`new_item: ${JSON.stringify(data)}`));
            socket.on('updated_item', (data) => console.log(`updated_item: ${JSON.stringify(data)}`));
            socket.on('auction_update', (data) => console.log(`auction_update: ${JSON.stringify(data)}`));
            socket.on('deleted_item', (data) => console.log(`deleted_item: ${JSON.stringify(data)}`));
            socket.on('trade_status', (data) => console.log(`trade_status: ${JSON.stringify(data)}`));
            socket.on("disconnect", (reason) => console.log(`Socket disconnected: ${reason}`));
        });

        // Listen for the following event to be emitted by the socket in error cases
        socket.on("close", (reason) => console.log(`Socket closed: ${reason}`));
        socket.on('error', (data) => console.log(`WS Error: ${data}`));
        socket.on('connect_error', (data) => console.log(`Connect Error: ${data}`));
    } catch (e) {
        console.log(`Error while initializing the Socket. Error: ${e}`);
    }
};

initSocket();
Updated 5 months ago

Websocket Events
All websocket events can be either a single item OR an array containing multiple items.

timesync
Syncing server timestamp. It is not emitted unless the client asks it by sending timesync event.


  ["timesync",1619682261540]
new_item
Emitted when a new item is available.

JSON

[
  "new_item",
  [
    {
      "auction_ends_at": 1682284226,
      "auction_highest_bid": null,
      "auction_highest_bidder": null,
      "auction_number_of_bids": 0,
      "custom_price_percentage": 197,
      "icon_url": "-9a81dlWLwJ2UUGcVs_nsVtzdOEdtWwKGZZLQHTxDZ7I56KU0Zwwo4NUX4oFJZEHLbXH5ApeO4YmlhxYQknCRvCo04DEVlxkKgposr-kLAtl7PLFTj9Q49Kskb-Yh_bmOLfUqWdY781lxL2T8Y-kjAa2qhZlNmz7ItCSd1I4ZVrVrFi6kO_mgJa9uJXAyHdguXI8pSGKoKTrgPA",
      "is_commodity": false,
      "market_name": "Desert Eagle | Bronze Deco (Factory New)",
      "market_value": 353,
      "name_color": "D2D2D2",
      "preview_id": null,
      "price_is_unreliable": false,
      "stickers": [
        {
          "sticker_id": 377,
          "wear": null,
          "name": "Kawaii Killer Terrorist",
          "image": "-9a81dlWLwJ2UUGcVs_nsVtzdOEdtWwKGZZLQHTxDZ7I56KU0Zwwo4NUX4oFJZEHLbXQ9QVcJY8gulReQ0HdUuqkw9aDARJ_JBNWv7OuIgts1uH3ZQJO7c6xkc6PkaOkYe2Ik2hVsJIgibqV9t2hjAy28kJpNWjzIYGXd1JoNA6G_lHv366x0hEUSJjM"
        },
        {
          "sticker_id": 965,
          "wear": null,
          "name": "Merietta",
          "image": "-9a81dlWLwJ2UUGcVs_nsVtzdOEdtWwKGZZLQHTxDZ7I56KU0Zwwo4NUX4oFJZEHLbXQ9QVcJY8gulRNRULFV_eS1M7DQEh4IEtas6isLhN00szEcC9F6ZLux9ONzvP3Y-yJwTtX6pQj3-uWp9qs2A3n-kRkMjvxLNWcegNqYQ7Z5BHgliqAJ7zD"
        }
      ],
      "wear": 0.053,
      "published_at": "2023-04-23T21:07:36.874150Z",
      "id": 148843931,
      "depositor_stats": {
        "delivery_rate_recent": 1,
        "delivery_rate_long": 0.99,
        "delivery_time_minutes_recent": 0,
        "delivery_time_minutes_long": 17,
        "steam_level_min_range": 5,
        "steam_level_max_range": 10,
        "user_has_trade_notifications_enabled": true,
        "user_is_online": null
      },
      "above_recommended_price": 191,
      "purchase_price": 353
    },
    {
      "auction_ends_at": 1682284227,
      "auction_highest_bid": null,
      "auction_highest_bidder": null,
      "auction_number_of_bids": 0,
      "custom_price_percentage": 14,
      "icon_url": "-9a81dlWLwJ2UUGcVs_nsVtzdOEdtWwKGZZLQHTxDZ7I56KU0Zwwo4NUX4oFJZEHLbXH5ApeO4YmlhxYQknCRvCo04DEVlxkKgpot7HxfDhjxszJemkV09G3h5SOhe7LPr7Vn35cpsEl0-2Xrdii3APt-RI4ZG71IdOXelJoZVDX_li7kOu-1MW6uZ_JyHV9-n51hRUaMfs",
      "is_commodity": false,
      "market_name": "AK-47 | Elite Build (Field-Tested)",
      "market_value": 266,
      "name_color": "D2D2D2",
      "preview_id": null,
      "price_is_unreliable": false,
      "stickers": [
        {
          "sticker_id": 5132,
          "wear": null,
          "name": "Perfecto | Stockholm 2021",
          "image": "-9a81dlWLwJ2UUGcVs_nsVtzdOEdtWwKGZZLQHTxDZ7I56KU0Zwwo4NUX4oFJZEHLbXQ9QVcJY8gulROWEPTTOz_h52CHE59IjtHs6ijLgR03MzEcC9F6ZLmwdPTlqGjau7XxWoGvJRz272Uotqh3FLmrkBvMTvzJNWUdw8_NQqD5BHgljRT2dJr"
        },
        {
          "sticker_id": 4777,
          "wear": null,
          "name": "Liquid | 2020 RMR",
          "image": "-9a81dlWLwJ2UUGcVs_nsVtzdOEdtWwKGZZLQHTxDZ7I56KU0Zwwo4NUX4oFJZEHLbXQ9QVcJY8gulRPQV6CF7b9mMPaQmJ4JBZQs_Skf1Q41afJdTsX796zlYPclaWtMr3Vwm1XuJcpj-uRrdml3ADkqkNrfSmtc1IIUOC7"
        },
        {
          "sticker_id": 4536,
          "wear": 0.7532175183296204,
          "name": "Extermination",
          "image": "-9a81dlWLwJ2UUGcVs_nsVtzdOEdtWwKGZZLQHTxDZ7I56KU0Zwwo4NUX4oFJZEHLbXQ9QVcJY8gulRVTUDfCOG1w8rBXlR6JBBeubSaJwZy1PaGcmUTvI_hzNnSwPb2ZbmEkm4EuJUj276Xo4-mjgew-0BpZG-gcNTDIBh-Pw_rXqC9BQ"
        },
        {
          "sticker_id": 923,
          "wear": 0.6144185066223145,
          "name": "Flipsid3 Tactics | Cluj-Napoca 2015",
          "image": "-9a81dlWLwJ2UUGcVs_nsVtzdOEdtWwKGZZLQHTxDZ7I56KU0Zwwo4NUX4oFJZEHLbXQ9QVcJY8gulReQFnaFbT8goDVX1RkGghWpL2gZVVm16DOdT5G7t3kxobawPakN-uIwzgDv5Ap0rmVrNyk3FG1-EA-MmjtZNjCmcnHFc4"
        }
      ],
      "wear": 0.346,
      "published_at": "2023-04-23T21:07:37.029237Z",
      "id": 148843957,
      "depositor_stats": {
        "delivery_rate_recent": 1,
        "delivery_rate_long": 0.99,
        "delivery_time_minutes_recent": 0,
        "delivery_time_minutes_long": 17,
        "steam_level_min_range": 5,
        "steam_level_max_range": 10,
        "user_has_trade_notifications_enabled": true,
        "user_is_online": null
      },
      "above_recommended_price": 8,
      "purchase_price": 266
    },
    {
      "auction_ends_at": 1682284229,
      "auction_highest_bid": null,
      "auction_highest_bidder": null,
      "auction_number_of_bids": 0,
      "custom_price_percentage": 11,
      "icon_url": "-9a81dlWLwJ2UUGcVs_nsVtzdOEdtWwKGZZLQHTxDZ7I56KU0Zwwo4NUX4oFJZEHLbXH5ApeO4YmlhxYQknCRvCo04DEVlxkKgpovbSsLQJf3qr3czxb49KzgL-Khsj2P67UklRc7cF4n-SP9tXw3gLl-BZvamGhIIDAIwQ8NAyB_1C8wO-61pfvup_By3Yw63Uj7GGdwUKpIv7t7w",
      "is_commodity": false,
      "market_name": "★ M9 Bayonet | Blue Steel (Field-Tested)",
      "market_value": 106933,
      "name_color": "8650AC",
      "preview_id": "13bbfe513e9c",
      "price_is_unreliable": false,
      "stickers": [],
      "wear": 0.18,
      "published_at": "2023-04-23T21:07:37.118648Z",
      "id": 148844032,
      "depositor_stats": {
        "delivery_rate_recent": 1,
        "delivery_rate_long": 1,
        "delivery_time_minutes_recent": 1,
        "delivery_time_minutes_long": 2,
        "steam_level_min_range": 100,
        "steam_level_max_range": 5000,
        "user_has_trade_notifications_enabled": false,
        "user_is_online": null
      },
      "above_recommended_price": 5,
      "purchase_price": 106933
    }
  ]
]
updated_item
Emitted when an existing item has been updated. For example, if status changes.

JSON

["updated_item", {
    "app_id": 730,
    "auction_auto_withdraw_failed": null,
    "auction_ends_at": 1631921311,
    "auction_highest_bid": null,
    "auction_highest_bidder": null,
    "auction_number_of_bids": 0,
    "custom_name": null,
    "description_type": "Souvenir Mil-Spec Grade SMG",
    "icon_url": "-9a81dlWLwJ2UUGcVs_nsVtzdOEdtWwKGZZLQHTxDZ7I56KU0Zwwo4NUX4oFJZEHLbXH5ApeO4YmlhxYQknCRvCo04DEVlxkKgpou6r8FAZu7OHNdQJO5du-gM7bwqb2MeuClTsCv8Ek2LiZ9t2giwa28hVlZGD0doSUIANqYV_U_gC2366x0j0WoURS",
    "img": "-9a81dlWLwJ2UUGcVs_nsVtzdOEdtWwKGZZLQHTxDZ7I56KU0Zwwo4NUX4oFJZEHLbXH5ApeO4YmlhxYQknCRvCo04DEVlxkKgpou6r8FAZu7OHNdQJO5du-gM7bwqb2MeuClTsCv8Ek2LiZ9t2giwa28hVlZGD0doSUIANqYV_U_gC2366x0j0WoURS",
    "is_commodity": false,
    "market_name": "Souvenir MP9 | Hot Rod (Factory New)",
    "market_value": 3394,
    "name": "Souvenir MP9 | Hot Rod (Factory New)",
    "name_color": "FFD700",
    "paint_index": null,
    "paint_seed": null,
    "preview_id": null,
    "price_is_unreliable": 0,
    "stickers": [],
    "tradable": true,
    "tradelock": false,
    "updated_at": "2021-09-17 23:15:33",
    "wear": null,
    "published_at": "2021-09-17T23:25:31.111700Z",
    "id": 10003,
}]
auction_update
Emitted when someone places a bid for an auction item.

JSON

[
  {
    "id": 148844336,
    "above_recommended_price": 10,
    "auction_highest_bid": 79,
    "auction_highest_bidder": 3894061,
    "auction_number_of_bids": 11,
    "auction_ends_at": 1682284308
  },
  {
    "id": 148844305,
    "above_recommended_price": 18,
    "auction_highest_bid": 35,
    "auction_highest_bidder": 2678443,
    "auction_number_of_bids": 7,
    "auction_ends_at": 1682284301
  },
  {
    "id": 148844241,
    "above_recommended_price": 14,
    "auction_highest_bid": 203,
    "auction_highest_bidder": 7905183,
    "auction_number_of_bids": 17,
    "auction_ends_at": 1682284289
  }
]
deleted_item
Emitted when the item is not anymore available for withdrawing. Eg. the auction ends and the winner withdraws it. Contains an array of ids.

JSON

[
   "deleted_item",
   [
      91997374,
      92044606,
      92019018,
      92044607,
      91997376,
      92044608,
      91997377
   ]
]
trade_status
Emitted when the trade status gets updated.

JSON

[
  "trade_status",
  [
    {
      "type": "withdrawal",
      "data": {
        "status": 6,
        "status_message": "Completed",
        "id": 19179038,
        "item_id": 148842604,
        "tradeoffer_id": 148842604,
        "item": {
          "market_name": "Sticker | Tyloo | Stockholm 2021",
          "market_value": 0.31
        },
        "total_value": 35
      }
    }
  ]
]

deposit_failed
Emitted when a deposit fails.

JSON

[
  "deposit_failed",
  [
    {
      "response": {
        "data": {
          "success": false,
          "message": "\"Sticker | device (Gold) | Boston 2018\" (ID 3517043328) already exists in another deposit by you. Please select a different item.",
          "error_key": "item_already_deposited",
          "item_id": 30013
        },
        "status": 400,
        "statusText": "Bad Request"
      }
    }
]
Updated 6 months ago

